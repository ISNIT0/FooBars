// Generated by CoffeeScript 1.8.0
(function() {
  exports.parse = function(src, helpers, cb) {
    var $, Entities, cheerio, entities, file, out, replaceData;
    Entities = require('html-entities').AllHtmlEntities;
    entities = new Entities();
    cheerio = require('cheerio');
    replaceData = function(src, templateData) {
      return src.match(/{{[^>#](.*?)}}/g).map(function(value, index) {
        return src.replace(value, new Function('return ' + value.replace(/[{}]/g, '')).bind(templateData)());
      }).join('');
    };
    file = require('fs').readFileSync(src, 'utf8');
    out = entities.decode(file);
    $ = cheerio.load(out);
    $('show').map(function(index, value) {
      $(value).before(replaceData($('template[name=' + $(value).attr('name') + ']').html(), helpers));
      $(value).remove();
      return $('template[name=' + $(value).attr('name') + ']').remove();
    });
    $('if').map(function(index, value) {
      if (!new Function('return ' + entities.decode($.html(value).split('<if ')[1]).split('>')[0].replace(/["]/g, '')).bind(helpers)()) {
        return $(value).remove();
      } else {
        $(value).before(replaceData($(value).html(), helpers));
        return $(value).remove();
      }
    });
    $('each').map(function(index, value) {
      $(value).before((new Function('return ' + entities.decode($(value).attr('of'))).bind(helpers)() || []).map(function(data, index) {
        return replaceData($(value).html(), data);
      }));
      return $(value).remove();
    });
    return cb(null, $.html().replace(/[\n]/g, '')) || $.html().replace(/[\n]/g, '');
  };

}).call(this);
